// Code generated by counterfeiter. DO NOT EDIT.
package datafakes

import (
	data "gogen/data"
	sync "sync"
)

type FakeCMSWriter struct {
	FlushStub        func()
	flushMutex       sync.RWMutex
	flushArgsForCall []struct {
	}
	WriteEntryStub        func(data.CMSEntry)
	writeEntryMutex       sync.RWMutex
	writeEntryArgsForCall []struct {
		arg1 data.CMSEntry
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCMSWriter) Flush() {
	fake.flushMutex.Lock()
	fake.flushArgsForCall = append(fake.flushArgsForCall, struct {
	}{})
	fake.recordInvocation("Flush", []interface{}{})
	fake.flushMutex.Unlock()
	if fake.FlushStub != nil {
		fake.FlushStub()
	}
}

func (fake *FakeCMSWriter) FlushCallCount() int {
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	return len(fake.flushArgsForCall)
}

func (fake *FakeCMSWriter) FlushCalls(stub func()) {
	fake.flushMutex.Lock()
	defer fake.flushMutex.Unlock()
	fake.FlushStub = stub
}

func (fake *FakeCMSWriter) WriteEntry(arg1 data.CMSEntry) {
	fake.writeEntryMutex.Lock()
	fake.writeEntryArgsForCall = append(fake.writeEntryArgsForCall, struct {
		arg1 data.CMSEntry
	}{arg1})
	fake.recordInvocation("WriteEntry", []interface{}{arg1})
	fake.writeEntryMutex.Unlock()
	if fake.WriteEntryStub != nil {
		fake.WriteEntryStub(arg1)
	}
}

func (fake *FakeCMSWriter) WriteEntryCallCount() int {
	fake.writeEntryMutex.RLock()
	defer fake.writeEntryMutex.RUnlock()
	return len(fake.writeEntryArgsForCall)
}

func (fake *FakeCMSWriter) WriteEntryCalls(stub func(data.CMSEntry)) {
	fake.writeEntryMutex.Lock()
	defer fake.writeEntryMutex.Unlock()
	fake.WriteEntryStub = stub
}

func (fake *FakeCMSWriter) WriteEntryArgsForCall(i int) data.CMSEntry {
	fake.writeEntryMutex.RLock()
	defer fake.writeEntryMutex.RUnlock()
	argsForCall := fake.writeEntryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCMSWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	fake.writeEntryMutex.RLock()
	defer fake.writeEntryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCMSWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ data.CMSWriter = new(FakeCMSWriter)
